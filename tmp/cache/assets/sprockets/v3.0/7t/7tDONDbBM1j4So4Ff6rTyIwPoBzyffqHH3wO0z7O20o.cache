I""(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  DemoApp.Views.TransactionsIndex = (function(superClass) {
    extend(TransactionsIndex, superClass);

    function TransactionsIndex() {
      this.appendTransaction = bind(this.appendTransaction, this);
      return TransactionsIndex.__super__.constructor.apply(this, arguments);
    }

    TransactionsIndex.prototype.template = JST['transactions/index'];

    TransactionsIndex.prototype.events = {
      'submit #new_account': 'createTransaction',
      'click #account_button': 'showForm'
    };

    TransactionsIndex.prototype.initialize = function() {
      this.collection.on('reset', this.render, this);
      this.collection.on('add', this.appendAccount, this);
      this.currency = new DemoApp.Collections.Currencies();
      this.currency.fetch({
        reset: true
      });
      this.currency.on('reset', this.render, this);
      this.accounts = new DemoApp.Collections.Accounts();
      this.accounts.fetch({
        reset: true
      });
      return this.accounts.on('reset', this.render, this);
    };

    TransactionsIndex.prototype.render = function() {
      $(this.el).html(this.template({
        currency: this.currency
      }));
      this.collection.each(this.appendTransaction);
      return this;
    };

    TransactionsIndex.prototype.appendTransaction = function(transaction) {
      var view;
      view = new DemoApp.Views.Transaction({
        model: transaction,
        collections: {
          currency: this.currency,
          accounts: this.accounts
        }
      });
      return this.$('#transactions').append(view.render().el);
    };

    return TransactionsIndex;

  })(Backbone.View);

}).call(this);
:ET