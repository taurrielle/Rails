I"$	(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  DemoApp.Views.Currency = (function(superClass) {
    extend(Currency, superClass);

    function Currency() {
      return Currency.__super__.constructor.apply(this, arguments);
    }

    Currency.prototype.template = JST['accounts/new_account'];

    Currency.prototype.events = {
      'submit #new_account': 'createAccount'
    };

    Currency.prototype.initialize = function() {
      return this.collection.on('reset', this.render, this);
    };

    Currency.prototype.render = function() {
      $(this.el).html(this.template({
        currency: this.collection
      }));
      return this;
    };

    Currency.prototype.createAccount = function(event) {
      var attributes;
      event.preventDefault();
      attributes = {
        name: $('#new_account_name').val(),
        balance: $('#new_account_balance').val(),
        currency_id: $('#new_account_currency').val()
      };
      console.log(attributes);
      this.currency = new DemoApp.Collections.Currencies();
      this.currency.fetch({
        reset: true
      });
      return this.currency.create(attributes, {
        wait: true,
        success: function() {
          return $('#new_account')[0].reset();
        },
        error: this.handleError
      });
    };

    Currency.prototype.handleError = function(account, response) {
      var attribute, errors, message, messages, results;
      if (response.status === 422) {
        errors = $.parseJSON(response.responseText).errors;
        results = [];
        for (attribute in errors) {
          messages = errors[attribute];
          results.push((function() {
            var i, len, results1;
            results1 = [];
            for (i = 0, len = messages.length; i < len; i++) {
              message = messages[i];
              results1.push(alert(attribute + " " + message));
            }
            return results1;
          })());
        }
        return results;
      }
    };

    return Currency;

  })(Backbone.View);

}).call(this);
:ET