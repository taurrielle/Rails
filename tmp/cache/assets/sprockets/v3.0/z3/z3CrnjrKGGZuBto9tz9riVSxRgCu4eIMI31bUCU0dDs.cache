I"ž(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  DemoApp.Views.TransactionsIndex = (function(superClass) {
    extend(TransactionsIndex, superClass);

    function TransactionsIndex() {
      this.appendTransaction = bind(this.appendTransaction, this);
      return TransactionsIndex.__super__.constructor.apply(this, arguments);
    }

    TransactionsIndex.prototype.template = JST['transactions/index'];

    TransactionsIndex.prototype.events = {
      'submit #new_transaction': 'createTransaction',
      'click #account_button': 'showForm'
    };

    TransactionsIndex.prototype.initialize = function() {
      this.collection.on('reset', this.render, this);
      this.collection.on('add', this.appendTransaction, this);
      this.currency = new DemoApp.Collections.Currencies();
      this.currency.fetch({
        reset: true
      });
      this.currency.on('reset', this.render, this);
      this.accounts = new DemoApp.Collections.Accounts();
      this.accounts.fetch({
        reset: true
      });
      return this.accounts.on('reset', this.render, this);
    };

    TransactionsIndex.prototype.render = function() {
      $(this.el).html(this.template({
        accounts: this.accounts
      }));
      this.collection.each(this.appendTransaction);
      return this;
    };

    TransactionsIndex.prototype.appendTransaction = function(transaction) {
      var view;
      view = new DemoApp.Views.Transaction({
        model: transaction,
        currency_collection: this.currency,
        accounts_collection: this.accounts
      });
      return this.$('#transactions').append(view.render().el);
    };

    TransactionsIndex.prototype.createTransaction = function(event) {
      var account, ammount, attributes;
      event.preventDefault();
      account = this.accounts.findWhere({
        id: parseInt($('#new_transaction_account').val())
      }, 10);
      ammount = parseInt($('#new_transaction_ammount').val(), 10);
      attributes = {
        ammount: $('#new_transaction_ammount').val(),
        description: $('#new_transaction_description').val(),
        made_on_date: $('#new_transaction_date').val(),
        account_id: $('#new_transaction_account').val(),
        currency: account.get('currency')
      };
      this.collection.show;
      this.accounts.save(account, {
        balance: account.get('balance') - ammount
      });
      return this.collection.create(attributes, {
        wait: true,
        success: function() {
          $('#new_transaction')[0].reset();
          $('#account_form').css('display', 'none');
          $('#account_button').html('Add account');
          return $('#error').css('display', 'none');
        },
        error: this.handleError
      });
    };

    TransactionsIndex.prototype.handleError = function(account, response) {
      var attribute, errors, message, messages, results;
      if (response.status === 422) {
        $('#error').empty();
        $('#error').css('display', 'block');
        errors = $.parseJSON(response.responseText).errors;
        results = [];
        for (attribute in errors) {
          messages = errors[attribute];
          results.push((function() {
            var i, len, results1;
            results1 = [];
            for (i = 0, len = messages.length; i < len; i++) {
              message = messages[i];
              results1.push($('#error').append('<li>' + 'The ' + attribute + ' ' + message + '</li>'));
            }
            return results1;
          })());
        }
        return results;
      }
    };

    return TransactionsIndex;

  })(Backbone.View);

}).call(this);
:ET